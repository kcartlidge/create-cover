using System.Text;
using ArgsParser;

namespace CreateCover
{
    public static class IndexSheet
	{
		public static void Write(
            string outputFile,
            Parser parser,
            Dictionary<string, string> images)
		{
            Console.WriteLine($"WRITING");
            Console.WriteLine($"  {outputFile}");

            // Could be a resource, but extracting/writing isn't worth it just for this.
            var html = new StringBuilder();

            // Preamble and styling.
            html.AppendLine("<html lang=\"en\">");
            html.AppendLine("<head>");
            html.AppendLine("  <meta charset=\"utf-8\">");
            html.AppendLine("  <style>");
            html.AppendLine("    html{font-family:monospace;font-size:11pt;}");
            html.AppendLine("    body{margin:1rem 2rem;padding:0;background:#fff;color:#000;}");
            html.AppendLine("    pre{background:#eee;padding:1rem;overflow-x:scroll;}");
            html.AppendLine("    h1{font-size:2rem;letter-spacing:-1px;}");
            html.AppendLine("    div{display:inline-block;margin:1rem 1rem 1rem 1rem;}");
            html.AppendLine("    div.large{padding-top:2rem;}");
            html.AppendLine("    h2{font-size:1rem;font-weight:normal;margin:0;text-align:center;}");
            html.AppendLine("    canvas{background:#fff;display:block;margin:0 0 4rem 0;}");
            html.AppendLine("    canvas{background-image: linear-gradient(-45deg, #eee 25%, transparent 25%, transparent 50%, #eee 50%, #eee 75%, transparent 75%, transparent);background-size:48px 48px;}");
            html.AppendLine("    svg{display:block;box-shadow:0 0 1rem rgba(0,0,0,0.5);}");
            html.AppendLine("    .small svg{width:135px;height:202px;cursor:pointer;}");
            html.AppendLine("    .anim{animation:wobble 0.25s;}");
            html.AppendLine("");
            html.AppendLine("    @keyframes wobble{");
            html.AppendLine("      0%{transform:rotate(0deg);}");
            html.AppendLine("      25%{transform:rotate(-5deg);}");
            html.AppendLine("      50%{transform:rotate(0deg);}");
            html.AppendLine("      75%{transform:rotate(5deg);}");
            html.AppendLine("      100%{transform:rotate(0deg);}");
            html.AppendLine("    }");
            html.AppendLine("  </style>");
            html.AppendLine("  <title>Create Cover index sheet</title>");
            html.AppendLine("</head>");
            html.AppendLine("<body>");
            html.AppendLine("  <h1>Generated by <em>Create Cover</em>.</h1>");

            // Display the command used to generate the covers.
            var provided = parser.GetProvidedArguments();
            html.AppendLine("  <p>Command arguments:</p>");
            html.Append("  <pre><code>");
            foreach (var opt in provided.Where(x => x.Value != null))
                html.Append($" -{opt.Key} \"{opt.Value}\"");
            foreach (var opt in provided.Where(x => x.Value == null))
                html.Append($" -{opt.Key}");
            html.AppendLine("  </code></pre>");

            // Display the theme thumbnails.
            html.AppendLine("  <p>Click a thumbnail cover to draw a 900x1350 PNG version beneath them.</p>");
            foreach (var (themename, svg) in images)
            {
                var base64 = Convert.ToBase64String(Encoding.UTF8.GetBytes(svg));
                var hint = $"Draw 900x1350 PNG cover for theme `{themename}` below";
                var handler = $" onclick=\"draw(this, '{base64}')\"";
                html.AppendLine($"  <div>");
                html.AppendLine($"    <h2>\"{themename}\"</h2>");
                html.AppendLine($"    <div class=\"small\"{handler} title=\"{hint}\">{svg}</div>");
                html.AppendLine($"  </div>");
            }
            html.AppendLine("  <hr/>");

            // Instructions and element for the PNG version.
            html.AppendLine("  <h3>900x1350 PNG - click a theme above</h3>");
            html.AppendLine("  <canvas width=\"900\" height=\"1350\"></canvas>");

            // Function that does the PNG rendering.
            html.AppendLine();
            html.AppendLine($"  <script>");
            html.AppendLine($"  // Draws an SVG 'source' (Base64) onto the canvas.");
            html.AppendLine($"  // The 'elem' is the enclosing element that will");
            html.AppendLine($"  // be animated when clicked.");
            html.AppendLine($"  function draw(elem, svgSource) {{");
            html.AppendLine($"    // Apply the on-click animation.");
            html.AppendLine($"    elem.classList.remove('anim');");
            html.AppendLine($"    void elem.offsetWidth;");
            html.AppendLine($"    elem.classList.add('anim');");
            html.AppendLine($"");
            html.AppendLine($"    // Prepare for the draw .");
            html.AppendLine($"    var canvas = document.querySelector(\"canvas\");");
            html.AppendLine($"    var context = canvas.getContext(\"2d\");");
            html.AppendLine($"    var image = new Image;");
            html.AppendLine($"    image.src = \"data:image/svg+xml;base64,\" + svgSource;");
            html.AppendLine($"");
            html.AppendLine($"    // Event handler to do the draw.");
            html.AppendLine($"    image.onload = function() {{");
            html.AppendLine($"      context.drawImage(image, 0, 0, 900, 1350);");
            html.AppendLine($"    }};");
            html.AppendLine($"  }};");
            html.AppendLine($"  </script>");

            // Done.
            html.AppendLine("</body>");
            html.AppendLine("</html>");
            File.WriteAllText(outputFile, html.ToString());
        }
    }
}
